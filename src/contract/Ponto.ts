export const Ponto = {
  address: "0x1dd8f70cf40f014a1ef361545811329d423b2f60",
  abi: [
    "constructor(address _semaphoreAddress, address _verifierAddress, address _schemaAddress, address _eas)",
    "event MessageSent(uint256 message, uint256 groupId)",
    "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
    "function attest(tuple(bytes32 schema, tuple(address recipient, uint64 expirationTime, bool revocable, bytes32 refUID, bytes data, uint256 value) data) _request) payable",
    "function attesters(address) view returns (bool)",
    "function createGroup(uint256 _groupId, bytes32 _schemaId, address _attester, string _uri)",
    "function eas() view returns (address)",
    "function getGroup(uint256 _groupId) view returns (tuple(uint256 id, bytes32 schema, address attester, string uri))",
    "function groups(uint256) view returns (uint256 id, bytes32 schema, address attester, string uri)",
    "function ids(uint256) view returns (uint256)",
    "function joinGroup(uint256 _identityCommitment, uint256 _groupId, bytes32 _uid)",
    "function owner() view returns (address)",
    "function registerNewSchema(string _schema, address _resolverAddress, bool _revocable)",
    "function removeMember(bytes32 _uid, uint256 _groupId, uint256 _identityCommitment, uint256[] _proofSiblings, uint8[] _proofPathIndices)",
    "function renounceOwnership()",
    "function revoke(tuple(bytes32 schema, tuple(bytes32 uid, uint256 value) data) _request)",
    "function schemaRegister() view returns (address)",
    "function semaphore() view returns (address)",
    "function sendMessage(uint256 message, uint256 nullifierHash, uint256 _groupId, uint256 merkleTreeDepth, uint256 merkleTreeRoot, uint256[8] proof)",
    "function sendReview(uint256 groupId, uint256 review, uint256 merkleTreeRoot, uint256 nullifierHash, uint256[8] proof)",
    "function transferOwnership(address newOwner)",
    "function verifier() view returns (address)",
  ],
};
